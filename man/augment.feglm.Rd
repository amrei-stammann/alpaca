% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/broom.R
\name{augment.feglm}
\alias{augment.feglm}
\title{Augment data with information from a(n) feglm
  object}
\usage{
\method{augment}{feglm}(x, data = x$data, ...)
}
\arguments{
\item{x}{A `feglm` object returned from [alpaca::feglm()].}

\item{data}{A [data.frame()] or [tibble::tibble()] containing
the original data that was used to produce the object `x`.
Defaults to `stats::model.frame(x)` so that
`augment(my_fit)` returns the augmented original data. **Do
not** pass new data to the `data` argument. Augment will
report information such as influence and cooks distance for
data passed to the `data` argument. These measures are only
defined for the original training data.}

\item{...}{Additional arguments. Not used. Needed to match generic
signature only. **Cautionary note:** Misspelled arguments will be
absorbed in `...`, where they will be ignored. If the misspelled
argument has a default value, the default value will be used.
For example, if you pass `conf.lvel = 0.9`, all computation will
proceed using `conf.level = 0.95`. Additionally, if you pass
`newdata = my_tibble` to an [augment()] method that does not
accept a `newdata` argument, it will use the default value for
the `data` argument.}
}
\value{
A [tibble::tibble()] containing the data passed to `augment`,
  and **additional** columns:

  \item{.fitted}{The predicted response for that observation.}
  \item{.resid}{The residual for a particular point. Present
  only when data has been passed to `augment` via the `data`
  argument.}
}
\description{
Augment accepts a model object and a dataset and
  adds information about each observation in the dataset. Most
  commonly, this includes predicted values in the `.fitted`
  column, residuals in the `.resid` column, and standard
  errors for the fitted values in a `.se.fit` column. New
  columns always begin with a `.` prefix to avoid overwriting
  columns in the original dataset.

  Users may pass data to augment via either the `data`
  argument or the `newdata` argument. If the user passes data
  to the `data` argument, it **must** be exactly the data that
  was used to fit the model object. Pass datasets to `newdata`
  to augment data that was not used during model fitting. This
  still requires that all columns used to fit the model are
  present.

  Augment will often behavior different depending on whether
  `data` or `newdata` is specified. This is because there is
  often information associated with training observations
  (such as influences or related) measures that is not
  meaningfully defined for new observations.

  For convenience, many augment methods provide default `data`
  arguments, so that `augment(fit)` will return the augmented
  training data. In these cases augment tries to reconstruct
  the original data based on the model object, with some
  varying degrees of success.

  The augmented dataset is always returned as a
  [tibble::tibble] with the **same number of rows** as the
  passed dataset. This means that the passed data must be
  coercible to a tibble. At this time, tibbles do not support
  matrix-columns. This means you should not specify a matrix
  of covariates in a model formula during the original model
  fitting process, and that [splines::ns()], [stats::poly()]
  and [survival::Surv()] objects are not supported in input
  data. If you encounter errors, try explicitly passing a
  tibble, or fitting the original model on data in a tibble.

  We are in the process of defining behaviors for models fit
  with various [na.action] arguments, but make no guarantees
  about behavior when data is missing at this time.
}
\examples{

library(alpaca)

dt <- simGLM(n = 40, t = 10, seed = 123, model = "poisson")

res_feglm <- feglm(formula = y ~ x1 + x2 + x3 | i + t,
                   data = dt, family = poisson())
res_feglm
tidy(res_feglm)
tidy(res_feglm, type = "sandwich")
tidy(res_feglm, type = "clustered", cluster = ~ i + t)
augment(res_feglm)
glance(res_feglm)

}
\seealso{
[alpaca::feglm()]

Other feglm tidiers: 
\code{\link{tidy.feglm}()}
}
\concept{feglm tidiers}
